using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using PolinBas;
namespace Test {
    [TestFixture]
    public class UnitTest1 {
        [Test]
        
            //
        [TestCase
        public void ChekTest(string pol1, string pol2, string pol3, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            int[] c = new int[1];
            a = Program.StrToByt(pol1);
            b = Program.StrToByt(pol2);
            c = Program.StrToByt(pol3);
            var actualResult = Program.Check(a, b, c);
            Assert.AreEqual(expectedResult, Program.BytToStr(actualResult));
        }

        [Test]
        //
        [TestCase
        [TestCase
        public void AddTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.StrToByt(pol1);
            b = Program.StrToByt(pol2);
            var actualResult = Program.BytToStr(Program.Add(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        
        [Test]
        [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        public void ZeroFindTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.StrToByt(pol1);
            var actualResult = Program.BytToStr(Program.Add(a, a));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase("1110101001111111", "111010100111111100000000000000000000")]
        public void ShiftBitsTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.StrToByt(pol1);
            var actualResult = Program.BytToStr(Program.ShiftBits(a, 20));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase("00011011101111110011000110001011001001001111010011101011001110110101001100000101000001011011010000011110010101111010010000101111000001111010101000010000000001011100010011101111001000000011111101101011000011010011100010010010000111011", "0", "0")]
        [TestCase
        public void MultiTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.StrToByt(pol1);
            b = Program.StrToByt(pol2);

            var actualResult = Program.BytToStr(Program.Multi(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        ///
        [Test]
        [TestCase
        [TestCase
        public void OneFindTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.StrToByt(pol1);
            b = Program.StrToByt(pol2);
            var actualResult = Program.BytToStr(Program.Multi(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase("11101001101100110110100011101011110111000101011011111011111010110100100110011011000001101010111111001001001101001010101010111000111011110110011101110010111110010010011011011001111101011001010110100001000000100111001101101111000110000", "10110010110101110001010111011110010100100100010100011000000100100100111001111001100010001101101100001001100100001011000000010100100101001101011101111111000101110010101111110000001010110010000001111100111100011101010000010110100111111")]
        [TestCase("11010010010110110101101001100111111110101100010001110110111101010010100000110000101011110011100101110100100101001110001001011110101110111100101111101111110010011101000111101000111000010011010001001001001011001100110101111000101101110", "11100011010011010000010100110110001001010000010111011101011010001000100110001001010100111011100101000100011110110000110010000011110010101100000001111111101011001010000110101101011110010101100011101100100111000111001010110101010110101")]
        public void SQTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.StrToByt(pol1);
            var actualResult = Program.BytToStr(Program.SQ(a));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase("11010010100000110111111110111100001111101001101111011110000010111011000100100001111110010110010010001111011110111110010101010100111000001111011010001011011110010100100100001111010111111100000110010101011011010111111101101011001010110",
            "1")]
        [TestCase("11011110111100010011001011110100101110111011001111101101011001110100110101001101000110000000111101010000110001010010000000110000000000101001100001100000110000010010000001101110010011100101000111001000011001101011100111010001001010000",
"1")]
        public void TrTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.StrToByt(pol1);
            var actualResult = Program.BytToStr(Program.Tr(a));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void BPTest(string pol1, string N, string expectedResult) {
            int[] a = new int[1];
            int[] n = new int[1];
            a = Program.StrToByt(pol1);
            n = Program.StrToByt(N);
            var actualResult = Program.BytToStr(Program.BP(a, n));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //
        [Test]
        [TestCase("10110000101100110110011100010001001000000001100001101000110010000101001110010100110011001000011010001000011011111111000111001111000111001101111101000110011001110111001101110000010000001000011001111111100000010101110000101100001011100", "00101100110001101111110101111101100111111000110001000100110111101011010101100011011100111000000100001110011111010010011111011111101101011100101010111111001000100100011101100101010111011100000110010010011000010001000110010010010100001")]
        [TestCase("01110011010101100011010011000101101001000111011010111111000000100010000010101000000111111011011011011000100001011000001101011011110001101111010100001010000110010001101011010111111001000100011110101101010011100011100100101011001010110", "10011001011011010101000101101111110001011100001101111110011111111001000100100100000111010011001110101101101010001001000001110011010000011111001111000100000001110000100001010011011010001110000101001110110000011100101111101010100010010")]
        [TestCase("00111101111001011100110000101111010111110000100101001011001010111100110001110010000110100101000001111000000011101100101001110000100000110011001111010111111110010010100001010011101100000110110101101101011100101010011001010110111100011", "11011010100010010100110001000110100001010010100000011001111111111100100101011100001011110001010110001011110101010011100010111100011110100101000010001011010010100101101000000001000110101010011011010000110111000100101001110100000010010")]
        public void InvTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.StrToByt(pol1);
            var actualResult = Program.BytToStr(Program.Inv(a));
            Assert.AreEqual(expectedResult, actualResult);
        }


    }


}
    

